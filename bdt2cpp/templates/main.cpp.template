#include <iostream>
#include <vector>
#include <cmath>

double tree(const std::vector<double>& features)
{
  double sum = 0;
  {% for node in trees recursive -%}
    {% if not node.final -%}
      if(features[{{ node.feature_index }}] < {{ node.cut_value }}){
        {{ loop(node.left) }}
      } else {
        {{ loop(node.right) }}
      }
    {%- else -%}
      sum += {{ node.weight }};
    {%- endif %}
  {%- endfor %}
  return sum;
}

int main(int argc, char const *argv[]) {
  std::cout << "Hello, world" << std::endl;

  std::vector<double> input;
  for(int i=1; i<argc; ++i){
    input.push_back(std::strtod(argv[i], nullptr));
  }

  auto val = tree(input);
  std::cout << val << "\n" << val / (1 + std::fabs(val)) << std::endl;

  return 0;
}
